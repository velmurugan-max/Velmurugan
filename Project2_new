import datetime

# Define a Patient class to encapsulate all patient-related data and methods
class Patient:
    def __init__(self, name, age, bp, cholesterol, family_diabetes, weight, height, smoking, physical_activity):
        self.name = name
        self.age = age
        self.bp = bp
        self.cholesterol = cholesterol
        self.family_diabetes = family_diabetes
        self.weight = weight
        self.height = height
        self.smoking = smoking
        self.physical_activity = physical_activity
        self.bmi = self.calculate_bmi()
        self.timestamp = datetime.datetime.now()

    def calculate_bmi(self):
        if self.height <= 0:
            return 0
        return round(self.weight / ((self.height / 100) ** 2), 2)

    def get_data_dict(self):
        return {
            "name": self.name,
            "age": self.age,
            "blood_pressure": self.bp,
            "cholesterol": self.cholesterol,
            "family_history_diabetes": self.family_diabetes,
            "weight": self.weight,
            "height": self.height,
            "bmi": self.bmi,
            "smoking": self.smoking,
            "physical_activity": self.physical_activity,
            "timestamp": str(self.timestamp)
        }

def get_valid_int(prompt, min_value=0):
    while True:
        try:
            value = int(input(prompt))
            if value >= min_value:
                return value
            else:
                print(f"Value must be >= {min_value}.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def get_valid_choice(prompt, choices):
    while True:
        response = input(prompt).strip().lower()
        if response in choices:
            return response
        else:
            print(f"Please choose from: {', '.join(choices)}")

def evaluate_risk(patient):
    score = 0
    if patient.age > 50:
        score += 1
    if patient.bp > 130:
        score += 1
    if patient.cholesterol == 'high':
        score += 1
    if patient.family_diabetes == 'yes':
        score += 1
    if patient.bmi > 30:
        score += 1
    if patient.smoking == 'yes':
        score += 1
    if patient.physical_activity == 'low':
        score += 1

    if score >= 5:
        return "High"
    elif score >= 3:
        return "Moderate"
    else:
        return "Low"

def collect_patient_data():
    name = input("Enter patient name: ")
    age = get_valid_int("Enter age: ")
    bp = get_valid_int("Enter blood pressure: ")
    cholesterol = get_valid_choice("Cholesterol (normal/high): ", ['normal', 'high'])
    family_diabetes = get_valid_choice("Family history of diabetes (yes/no): ", ['yes', 'no'])
    weight = get_valid_int("Enter weight (kg): ")
    height = get_valid_int("Enter height (cm): ")
    smoking = get_valid_choice("Do you smoke? (yes/no): ", ['yes', 'no'])
    physical_activity = get_valid_choice("Physical activity (low/medium/high): ", ['low', 'medium', 'high'])

    return Patient(name, age, bp, cholesterol, family_diabetes, weight, height, smoking, physical_activity)

def display_patient(patient, risk):
    print("\n--- Patient Summary ---")
    for key, value in patient.get_data_dict().items():
        print(f"{key.replace('_', ' ').capitalize()}: {value}")
    print(f"Predicted Disease Risk: {risk}")
    print("------------------------\n")

def save_to_file(patient, risk, filename="patients.txt"):
    with open(filename, "a") as file:
        data = patient.get_data_dict()
        data['risk'] = risk
        file.write(str(data) + "\n")

def load_patients_from_file(filename="patients.txt"):
    try:
        with open(filename, "r") as file:
            print("\n*** Loaded Patient Records ***")
            for line in file:
                print(line.strip())
    except FileNotFoundError:
        print("No saved patient data found.")

def main():
    patients = []
    while True:
        patient = collect_patient_data()
        risk = evaluate_risk(patient)
        display_patient(patient, risk)
        save_to_file(patient, risk)
        patients.append((patient, risk))

        cont = get_valid_choice("Add another patient? (yes/no): ", ['yes', 'no'])
        if cont == 'no':
            break

    print("\n*** Summary Report ***")
    for i, (p, risk) in enumerate(patients, 1):
        print(f"Patient {i}: {p.name}, Risk: {risk}")

    view_saved = get_valid_choice("Do you want to view saved records? (yes/no): ", ['yes', 'no'])
    if view_saved == 'yes':
        load_patients_from_file()

if __name__ == "__main__":
    main()
